<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>03_JUnitSelenium</artifactId>
    <version>1.0-SNAPSHOT</version>

<!--
Configure to use Java 11 or higher, as this is required by JUnit5

Configure the maven-surefire-plugin and maven-failsafe-plugin to be at version 2.22.2 so that they can run JUnit5
-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <junit.jupiter.version>5.9.1</junit.jupiter.version>
        <junit.platform.version>1.9.1</junit.platform.version>



        <!--<skipTests>true</skipTests>-->
        <allure.version>2.13.0</allure.version>
        <!--Bu deger, allure report almak icin yazdigimiz pluginde kullanilir -->
        <allure.cmd.download.url>
            https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline
        </allure.cmd.download.url>

    </properties>



    <!--Apache Maven Projectlerinin jarlarini alip kullanmak icin -->
    <dependencies>

        <!-- https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager -->
        <!-- tum cesit broswerlarin driver.exe filelarini icerir, artik tek tek .exe file indirmek zorunda degiliz-->
        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>5.2.1</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
        <!-- //https://mvnrepository.com/ git ve selenium java ara-->
        <!-- selenium'un resmi sitesinden indirdigimiz tum jar filelarini icerir -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>4.6.0</version>
            <!--  .m2 ye kaydoldu-->
        </dependency>


        <!--junit-jupiter-engine: It has test engine implementation which is required at runtime to execute the tests.-->
        <!-- @Testlerin runtime esnasinda(yani yesil oka basildiginda) calismasini/execute edilmesini saglar -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
            <!--Bu dependency sadece ve sadece yesil java folder'inin icindeki classlarda kullanilabilir. -->
        </dependency>

        <!-- junit-jupiter-api: It is the main module where all core annotations are located, such as @Test, Lifecycle method annotations and assertions.-->
        <!-- JUNIT5 ANNOTATIONSLARININ GELDIGI DEPENDENCY dir-->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>


        <!-- junit-jupiter-params: Support for parameterized tests in JUnit 5. -->
        <!-- junit5'te parametreli testler yazmamizi saglar -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- JUNIT3-4 ile compatibility i saglayan kutuphanedir -->
        <!-- https://mvnrepository.com/artifact/org.junit.vintage/junit-vintage-engine -->
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>


        <!--junit-platform-suite: The @Suite support provided by this module to make the JUnitPlatform runner obsolete.-->
        <!--JUNIT5 TEST SUITE CLASSININ CALISMASI ICIN GEREKLIDIR -->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite</artifactId>
            <version>${junit.platform.version}</version>
            <scope>test</scope>
        </dependency>


        <!-- bu dependecy olmasaydi, bir alttaki alliure report dependency'si JUnitTestSuiteClass larimzin calismasini engelliyordu
        simdi ie bu dependecy sayseinde hem allure report'u hem testSuite i frameorkumuzde kullanabiliyoruz-->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <version>${junit.platform.version}</version>
        </dependency>


<!-- ALLURE REPORT OLUSTURABILMEMIZI SAGLAR-->
        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-junit5</artifactId>
            <version>${allure.version}</version>
        </dependency>

        <!--TO TAKE SCREENSHOT OF ALL WEBPAGE -->
        <!-- https://mvnrepository.com/artifact/ru.yandex.qatools.ashot/ashot -->
        <dependency>
            <groupId>ru.yandex.qatools.ashot</groupId>
            <artifactId>ashot</artifactId>
            <version>1.5.4</version>
        </dependency>

        <!--PDF OLUSTUMAK ICIN-->
        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>itextpdf</artifactId>
            <version>5.5.13.3</version>
        </dependency>
    </dependencies>



    <!-- JUnit kodlarini Intellij yesil oka basinca Run ediyor. Kodlari duz bir sekilde execute ediyor
     Maven'in kodlarimizi compile etmesini ardindan da projectimzi build etmesini istersek
     asagidaki ifadeleri yazmaliyiz-->

      <build><!-- projemizi build ederken ihtiyac duydugumuz pluginleri koydugumuz yerdir-->
        <plugins>
            <!-- JUNIT testlerini surefire plugin sayesinde maven ile run ederiz
            olusan surefire html report "/target/surefire-reports/" pathine olusur.-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M7</version>
                <configuration>


                    <!-- mvn install -Dmaven.test.skip=true commandi ile ayni gorevi gorur-->
                    <!-- buraya yazildigi an, include-exclude ifadeleri, test ifadeleri devredisi kalir -->
                    <!--<skipTests>${skipTests}</skipTests>-->

                    <!-- buraya yazildigi an, include-exclude ifadeleri, test ifadeleri devredisi kalir -->
                    <!--alttaki satir -> mvn clean -Dtest=JUnit5TestSuiteExample test commandi ile ayni isi yapar -->
                    <!--<test>whiteBoxTesting.Application.JUnit5TestSuiteExample</test>-->

                   <!--alttaki satir -> mvn clean -Dtest=a_CalculatorTest test commandi ile ayni isi yapar -->
                   <!-- <test>whiteBoxTesting.Application.a_CalculatorTest</test> -->


                    <!-- terminalde mvn .... command ile run etmek istedigimiz classlardir ->
                    <includes>

                       <!- packageName/packageName/className.java   kullanimi yoktur
                       <include>WhiteBoxTesting.Application.a_CalculatorTest.java</include>
                       -->

                        <!-- ? isareti 1 karakter demektir->
                        <include>**/*Test*.java</include>

                    </includes>

                    <!- terminalde mvn .... command ile run etmek isteMEDIGIMIZ classlardir ->
                    <excludes>
                        <exclude>**/e1*.java</exclude>
                        <!-<exclude>**/*TestSuite*.java</exclude> ->
                    </excludes>
-->

                    <!-- tagler yardimiyla @Testleri run edecksek direk alternative kullanimlari commentlemeliyiz -->
                    <!-- include tags, @Test lere @Tag veririz, o tag isimlerini buraya yazarsak onlar calisir->
                    <groups>getText|getAttribute</groups>
                    <groups>getText&getAttribute</groups>
                    <groups>getText,getAttribute</groups>

                    <!- exclude tags ->
                    <excludedGroups>getCssValue</excludedGroups>
-->

                </configuration>
            </plugin>



            <!-- bu plugin allure dependency ile beraber calisir ve allure JUnit report olusturur-->
            <plugin>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-maven</artifactId>
                <version>2.10.0</version>
                <configuration>
                    <reportVersion>${allure.version}</reportVersion>
                    <allureDownloadUrl>
                        ${allure.cmd.download.url}/${allure.version}/allure-commandline-${allure.version}.zip
                    </allureDownloadUrl>
                </configuration>
            </plugin>


        </plugins>
      </build>












    <!-- mvn build tool araciligi ile run ettignimiz testlerin html reportunu almamizi saglar-->
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>3.0.0-M7</version>
                <configuration>
                    <!-- <showSuccess>false</showSuccess> false: sadece fail olan testleri goster -->
                    <showSuccess>true</showSuccess><!--true: pass/fail olan testleri goster -->

                    <outputName>JUnit-Examples-Test-Report</outputName><!-- html reportun basligi -->

                </configuration>
            </plugin>
        </plugins>
    </reporting>

</project>